# Kickstart file template for RHEL/Rocky/CentOS Stream 9+
# Generated by ansible-role-virt-install

# System language
lang {{ vm_kickstart_vars.locale | default('en_US.UTF-8') }}
# Keyboard layout
keyboard {{ vm_kickstart_vars.keyboard | default('us') }}
# System timezone
timezone {{ vm_kickstart_vars.timezone | default('UTC') }} --utc

# Root password (provide a pre-hashed password)
rootpw --iscrypted {{ vm_kickstart_vars.root_password_hash | default('$6$invalid$hash') }}

# Use network installation or local media
{% if vm_iso_path.startswith('http') %}
url --url={{ vm_iso_path }}
{% else %}
# Assuming ISO is mounted via virt-install --location
cdrom
{% endif %}

# System bootloader configuration
bootloader --location=mbr --boot-drive=sda # Adjust boot drive if necessary

# Partition clearing information
clearpart --all --initlabel

# Disk partitioning information
{% if vm_kickstart_vars.partitions is defined and vm_kickstart_vars.partitions | length > 0 %}
# Custom partitioning scheme
{% for part in vm_kickstart_vars.partitions %}
part {{ part.mount | default('swap') }} --fstype="{{ part.fstype | default('xfs' if part.mount != 'swap' else 'swap') }}" --size={{ part.size_mb }} {% if part.grow | default(false) %}--grow {% endif %}{% if part.options is defined %}--fsoptions="{{ part.options }}" {% endif %}
{% endfor %}
{% else %}
# Default partitioning scheme
part /boot --fstype="xfs" --size={{ vm_kickstart_vars.default_boot_partition_size_mb | default(512) }}
part swap --fstype="swap" --size={{ vm_kickstart_vars.default_swap_partition_size_mb | default(1024) }}
part / --fstype="xfs" --grow --size={{ vm_kickstart_vars.default_root_partition_size_mb | default(1) }} # size=1 means minimum, grow fills remaining
{% endif %}

# System authorization information
authselect select minimal --with-mkhomedir
# Firewall configuration
firewall --enabled --service=ssh
# Network information
{% if vm_network_config_method == 'static' %}
network --bootproto=static --device={{ vm_network_device | default('eth0') }} --ip={{ vm_network_ip }} --gateway={{ vm_network_gateway }} {% if vm_network_dns_servers %}--nameserver={{ vm_network_dns_servers | join(',') }} {% endif %}--activate --onboot=on
{% else %}
# Using DHCP by default
network --bootproto=dhcp --device=link --activate --onboot=on
{% endif %}
# Set hostname
network --hostname={{ vm_kickstart_vars.hostname | default(vm_name) }}

# Do not configure the X Window System
xconfig --skipx

# Installation logging level
logging --level=info

# Reboot after installation
reboot

%packages --ignoremissing
# Default packages (can be overridden by vm_kickstart_vars.packages)
{% for pkg in vm_kickstart_vars.packages | default(['@core', 'openssh-server', 'vim-minimal', 'cloud-init', 'qemu-guest-agent']) %}
{{ pkg }}
{% endfor %}
# Ensure cloud-init and guest agent are installed for better integration
cloud-init
qemu-guest-agent
%end

%addon com_redhat_kdump --disable
%end

%post --log=/root/ks-post.log
echo "Starting Kickstart post-installation script" > /root/ks-post.log

# Set SELinux to enforcing
sed -i 's/^SELINUX=.*/SELINUX=enforcing/' /etc/selinux/config

# Create users defined in vm_kickstart_vars.users
{% for user in vm_kickstart_vars.users | default([]) %}
useradd {{ user.name }}
echo "{{ user.password_hash }}" | passwd --stdin {{ user.name }}
{% if user.groups %}
usermod -aG {{ user.groups }} {{ user.name }}
{% endif %}
{% if user.shell %}
usermod -s {{ user.shell }} {{ user.name }}
{% endif %}
# Add user to sudoers if in wheel group
{% if user.groups and 'wheel' in user.groups %}
echo '{{ user.name }} ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/{{ user.name }}
chmod 0440 /etc/sudoers.d/{{ user.name }}
{% endif %}
echo "Created user {{ user.name }}" >> /root/ks-post.log
{% endfor %}

# Enable and start qemu-guest-agent
systemctl enable qemu-guest-agent
systemctl start qemu-guest-agent
echo "Enabled qemu-guest-agent" >> /root/ks-post.log

# RHEL Subscription (if variables are provided)
{% if vm_kickstart_vars.ks_rhel_subscription_org and vm_kickstart_vars.ks_rhel_subscription_activation_key %}
echo "Attempting RHEL registration..." >> /root/ks-post.log
subscription-manager register --org="{{ vm_kickstart_vars.ks_rhel_subscription_org }}" --activationkey="{{ vm_kickstart_vars.ks_rhel_subscription_activation_key }}" --force >> /root/ks-post.log 2>&1
  {% if vm_kickstart_vars.ks_rhel_subscription_pool_id %}
  echo "Attaching pool {{ vm_kickstart_vars.ks_rhel_subscription_pool_id }}" >> /root/ks-post.log
  subscription-manager attach --pool="{{ vm_kickstart_vars.ks_rhel_subscription_pool_id }}" >> /root/ks-post.log 2>&1
  {% else %}
  echo "Attaching best available pool..." >> /root/ks-post.log
  subscription-manager attach --auto >> /root/ks-post.log 2>&1
  {% endif %}
echo "RHEL registration attempt finished." >> /root/ks-post.log
{% endif %}

echo "Kickstart post-installation script finished."
%end
